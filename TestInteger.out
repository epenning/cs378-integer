==3236== Memcheck, a memory error detector
==3236== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==3236== Using Valgrind-3.10.0.SVN and LibVEX; rerun with -h for copyright info
==3236== Command: ./TestInteger
==3236== 
Running main() from gtest_main.cc
[==========] Running 111 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 111 tests from IntegerFixture
[ RUN      ] IntegerFixture.shift_left_1
[       OK ] IntegerFixture.shift_left_1 (22 ms)
[ RUN      ] IntegerFixture.shift_left_2
[       OK ] IntegerFixture.shift_left_2 (4 ms)
[ RUN      ] IntegerFixture.shift_left_3
[       OK ] IntegerFixture.shift_left_3 (4 ms)
[ RUN      ] IntegerFixture.shift_right_1
[       OK ] IntegerFixture.shift_right_1 (5 ms)
[ RUN      ] IntegerFixture.shift_right_2
[       OK ] IntegerFixture.shift_right_2 (4 ms)
[ RUN      ] IntegerFixture.shift_right_3
[       OK ] IntegerFixture.shift_right_3 (4 ms)
[ RUN      ] IntegerFixture.shift_right_4
[       OK ] IntegerFixture.shift_right_4 (4 ms)
[ RUN      ] IntegerFixture.shift_right_5
[       OK ] IntegerFixture.shift_right_5 (4 ms)
[ RUN      ] IntegerFixture.plus_digits_1
[       OK ] IntegerFixture.plus_digits_1 (7 ms)
[ RUN      ] IntegerFixture.plus_digits_2
[       OK ] IntegerFixture.plus_digits_2 (4 ms)
[ RUN      ] IntegerFixture.plus_digits_3
[       OK ] IntegerFixture.plus_digits_3 (6 ms)
[ RUN      ] IntegerFixture.plus_digits_4
[       OK ] IntegerFixture.plus_digits_4 (6 ms)
[ RUN      ] IntegerFixture.plus_digits_5
[       OK ] IntegerFixture.plus_digits_5 (6 ms)
[ RUN      ] IntegerFixture.minus_digits_1
[       OK ] IntegerFixture.minus_digits_1 (7 ms)
[ RUN      ] IntegerFixture.minus_digits_2
[       OK ] IntegerFixture.minus_digits_2 (4 ms)
[ RUN      ] IntegerFixture.minus_digits_3
[       OK ] IntegerFixture.minus_digits_3 (6 ms)
[ RUN      ] IntegerFixture.minus_digits_4
[       OK ] IntegerFixture.minus_digits_4 (6 ms)
[ RUN      ] IntegerFixture.minus_digits_5
[       OK ] IntegerFixture.minus_digits_5 (6 ms)
[ RUN      ] IntegerFixture.minus_digits_6
[       OK ] IntegerFixture.minus_digits_6 (5 ms)
[ RUN      ] IntegerFixture.minus_digits_7
[       OK ] IntegerFixture.minus_digits_7 (6 ms)
[ RUN      ] IntegerFixture.minus_digits_8
[       OK ] IntegerFixture.minus_digits_8 (5 ms)
[ RUN      ] IntegerFixture.multiplies_digits_00
[       OK ] IntegerFixture.multiplies_digits_00 (40 ms)
[ RUN      ] IntegerFixture.multiplies_digits_0
[       OK ] IntegerFixture.multiplies_digits_0 (6 ms)
[ RUN      ] IntegerFixture.multiplies_digits_1
[       OK ] IntegerFixture.multiplies_digits_1 (9 ms)
[ RUN      ] IntegerFixture.multiplies_digits_2
[       OK ] IntegerFixture.multiplies_digits_2 (7 ms)
[ RUN      ] IntegerFixture.multiplies_digits_3
[       OK ] IntegerFixture.multiplies_digits_3 (9 ms)
[ RUN      ] IntegerFixture.multiplies_digits_4
[       OK ] IntegerFixture.multiplies_digits_4 (8 ms)
[ RUN      ] IntegerFixture.multiplies_digits_5
[       OK ] IntegerFixture.multiplies_digits_5 (7 ms)
[ RUN      ] IntegerFixture.divides_digits_00
[       OK ] IntegerFixture.divides_digits_00 (12 ms)
[ RUN      ] IntegerFixture.divides_digits_0
[       OK ] IntegerFixture.divides_digits_0 (5 ms)
[ RUN      ] IntegerFixture.divides_digits_1
[       OK ] IntegerFixture.divides_digits_1 (5 ms)
[ RUN      ] IntegerFixture.divides_digits_2
[       OK ] IntegerFixture.divides_digits_2 (5 ms)
[ RUN      ] IntegerFixture.divides_digits_3
[       OK ] IntegerFixture.divides_digits_3 (8 ms)
[ RUN      ] IntegerFixture.divides_digits_4
[       OK ] IntegerFixture.divides_digits_4 (5 ms)
[ RUN      ] IntegerFixture.divides_digits_5
[       OK ] IntegerFixture.divides_digits_5 (30 ms)
[ RUN      ] IntegerFixture.equals_1
[       OK ] IntegerFixture.equals_1 (15 ms)
[ RUN      ] IntegerFixture.equals_2
[       OK ] IntegerFixture.equals_2 (2 ms)
[ RUN      ] IntegerFixture.equals_3
[       OK ] IntegerFixture.equals_3 (2 ms)
[ RUN      ] IntegerFixture.equals_4
[       OK ] IntegerFixture.equals_4 (2 ms)
[ RUN      ] IntegerFixture.equals_5
[       OK ] IntegerFixture.equals_5 (2 ms)
[ RUN      ] IntegerFixture.less_than_1
[       OK ] IntegerFixture.less_than_1 (3 ms)
[ RUN      ] IntegerFixture.less_than_2
[       OK ] IntegerFixture.less_than_2 (2 ms)
[ RUN      ] IntegerFixture.less_than_3
[       OK ] IntegerFixture.less_than_3 (2 ms)
[ RUN      ] IntegerFixture.less_than_4
[       OK ] IntegerFixture.less_than_4 (3 ms)
[ RUN      ] IntegerFixture.less_than_5
[       OK ] IntegerFixture.less_than_5 (2 ms)
[ RUN      ] IntegerFixture.less_than_6
[       OK ] IntegerFixture.less_than_6 (2 ms)
[ RUN      ] IntegerFixture.output_1
[       OK ] IntegerFixture.output_1 (6 ms)
[ RUN      ] IntegerFixture.output_2
[       OK ] IntegerFixture.output_2 (3 ms)
[ RUN      ] IntegerFixture.constructor_int_1
[       OK ] IntegerFixture.constructor_int_1 (2 ms)
[ RUN      ] IntegerFixture.constructor_int_2
[       OK ] IntegerFixture.constructor_int_2 (3 ms)
[ RUN      ] IntegerFixture.constructor_int_3
[       OK ] IntegerFixture.constructor_int_3 (3 ms)
[ RUN      ] IntegerFixture.constructor_int_4
[       OK ] IntegerFixture.constructor_int_4 (2 ms)
[ RUN      ] IntegerFixture.constructor_string_1
[       OK ] IntegerFixture.constructor_string_1 (6 ms)
[ RUN      ] IntegerFixture.constructor_string_2
[       OK ] IntegerFixture.constructor_string_2 (2 ms)
[ RUN      ] IntegerFixture.constructor_string_3
[       OK ] IntegerFixture.constructor_string_3 (3 ms)
[ RUN      ] IntegerFixture.constructor_string_int_1
[       OK ] IntegerFixture.constructor_string_int_1 (3 ms)
[ RUN      ] IntegerFixture.negation_1
[       OK ] IntegerFixture.negation_1 (7 ms)
[ RUN      ] IntegerFixture.negation_2
[       OK ] IntegerFixture.negation_2 (2 ms)
[ RUN      ] IntegerFixture.plus_equal_1
[       OK ] IntegerFixture.plus_equal_1 (8 ms)
[ RUN      ] IntegerFixture.plus_equal_2
[       OK ] IntegerFixture.plus_equal_2 (3 ms)
[ RUN      ] IntegerFixture.plus_equal_3
[       OK ] IntegerFixture.plus_equal_3 (7 ms)
[ RUN      ] IntegerFixture.plus_equal_4
[       OK ] IntegerFixture.plus_equal_4 (5 ms)
[ RUN      ] IntegerFixture.plus_equal_5
[       OK ] IntegerFixture.plus_equal_5 (6 ms)
[ RUN      ] IntegerFixture.plus_equal_6
[       OK ] IntegerFixture.plus_equal_6 (4 ms)
[ RUN      ] IntegerFixture.plus_equal_7
[       OK ] IntegerFixture.plus_equal_7 (3 ms)
[ RUN      ] IntegerFixture.plus_equal_8
[       OK ] IntegerFixture.plus_equal_8 (4 ms)
[ RUN      ] IntegerFixture.plus_equal_9
[       OK ] IntegerFixture.plus_equal_9 (2 ms)
[ RUN      ] IntegerFixture.minus_equal_1
[       OK ] IntegerFixture.minus_equal_1 (3 ms)
[ RUN      ] IntegerFixture.minus_equal_2
[       OK ] IntegerFixture.minus_equal_2 (3 ms)
[ RUN      ] IntegerFixture.minus_equal_3
[       OK ] IntegerFixture.minus_equal_3 (2 ms)
[ RUN      ] IntegerFixture.minus_equal_4
[       OK ] IntegerFixture.minus_equal_4 (2 ms)
[ RUN      ] IntegerFixture.minus_equal_5
[       OK ] IntegerFixture.minus_equal_5 (2 ms)
[ RUN      ] IntegerFixture.minus_equal_6
[       OK ] IntegerFixture.minus_equal_6 (3 ms)
[ RUN      ] IntegerFixture.minus_equal_7
[       OK ] IntegerFixture.minus_equal_7 (2 ms)
[ RUN      ] IntegerFixture.minus_equal_8
[       OK ] IntegerFixture.minus_equal_8 (2 ms)
[ RUN      ] IntegerFixture.multi_equal_1
[       OK ] IntegerFixture.multi_equal_1 (27 ms)
[ RUN      ] IntegerFixture.multi_equal_2
[       OK ] IntegerFixture.multi_equal_2 (6 ms)
[ RUN      ] IntegerFixture.multi_equal_3
[       OK ] IntegerFixture.multi_equal_3 (3 ms)
[ RUN      ] IntegerFixture.multi_equal_4
[       OK ] IntegerFixture.multi_equal_4 (4 ms)
[ RUN      ] IntegerFixture.multi_equal_5
[       OK ] IntegerFixture.multi_equal_5 (4 ms)
[ RUN      ] IntegerFixture.multi_equal_6
[       OK ] IntegerFixture.multi_equal_6 (3 ms)
[ RUN      ] IntegerFixture.divide_equal_1
[       OK ] IntegerFixture.divide_equal_1 (12 ms)
[ RUN      ] IntegerFixture.divide_equal_2
[       OK ] IntegerFixture.divide_equal_2 (3 ms)
[ RUN      ] IntegerFixture.divide_equal_3
[       OK ] IntegerFixture.divide_equal_3 (2 ms)
[ RUN      ] IntegerFixture.divide_equal_4
[       OK ] IntegerFixture.divide_equal_4 (3 ms)
[ RUN      ] IntegerFixture.divide_equal_5
[       OK ] IntegerFixture.divide_equal_5 (2 ms)
[ RUN      ] IntegerFixture.divide_equal_6
[       OK ] IntegerFixture.divide_equal_6 (3 ms)
[ RUN      ] IntegerFixture.divide_equal_7
[       OK ] IntegerFixture.divide_equal_7 (2 ms)
[ RUN      ] IntegerFixture.mod_equal_1
[       OK ] IntegerFixture.mod_equal_1 (6 ms)
[ RUN      ] IntegerFixture.mod_equal_2
[       OK ] IntegerFixture.mod_equal_2 (3 ms)
[ RUN      ] IntegerFixture.mod_equal_3
[       OK ] IntegerFixture.mod_equal_3 (3 ms)
[ RUN      ] IntegerFixture.mod_equal_4
[       OK ] IntegerFixture.mod_equal_4 (4 ms)
[ RUN      ] IntegerFixture.mod_equal_5
[       OK ] IntegerFixture.mod_equal_5 (4 ms)
[ RUN      ] IntegerFixture.mod_equal_6
[       OK ] IntegerFixture.mod_equal_6 (3 ms)
[ RUN      ] IntegerFixture.left_shift_equal_1
[       OK ] IntegerFixture.left_shift_equal_1 (3 ms)
[ RUN      ] IntegerFixture.left_shift_equal_2
[       OK ] IntegerFixture.left_shift_equal_2 (3 ms)
[ RUN      ] IntegerFixture.left_shift_equal_3
[       OK ] IntegerFixture.left_shift_equal_3 (2 ms)
[ RUN      ] IntegerFixture.left_shift_equal_4
[       OK ] IntegerFixture.left_shift_equal_4 (2 ms)
[ RUN      ] IntegerFixture.left_shift_equal_5
[       OK ] IntegerFixture.left_shift_equal_5 (4 ms)
[ RUN      ] IntegerFixture.right_shift_equal_1
[       OK ] IntegerFixture.right_shift_equal_1 (3 ms)
[ RUN      ] IntegerFixture.right_shift_equal_2
[       OK ] IntegerFixture.right_shift_equal_2 (2 ms)
[ RUN      ] IntegerFixture.right_shift_equal_3
[       OK ] IntegerFixture.right_shift_equal_3 (2 ms)
[ RUN      ] IntegerFixture.right_shift_equal_4
[       OK ] IntegerFixture.right_shift_equal_4 (3 ms)
[ RUN      ] IntegerFixture.right_shift_equal_5
[       OK ] IntegerFixture.right_shift_equal_5 (6 ms)
[ RUN      ] IntegerFixture.abs_1
[       OK ] IntegerFixture.abs_1 (2 ms)
[ RUN      ] IntegerFixture.abs_2
[       OK ] IntegerFixture.abs_2 (2 ms)
[ RUN      ] IntegerFixture.pow_1
[       OK ] IntegerFixture.pow_1 (2 ms)
[ RUN      ] IntegerFixture.pow_2
[       OK ] IntegerFixture.pow_2 (2 ms)
[ RUN      ] IntegerFixture.pow_3
[       OK ] IntegerFixture.pow_3 (3 ms)
[ RUN      ] IntegerFixture.pow_4
[       OK ] IntegerFixture.pow_4 (2 ms)
[ RUN      ] IntegerFixture.pow_5
[       OK ] IntegerFixture.pow_5 (6 ms)
[----------] 111 tests from IntegerFixture (581 ms total)

[----------] Global test environment tear-down
[==========] 111 tests from 1 test case ran. (610 ms total)
[  PASSED  ] 111 tests.
==3236== 
==3236== HEAP SUMMARY:
==3236==     in use at exit: 0 bytes in 0 blocks
==3236==   total heap usage: 4,234 allocs, 4,234 frees, 255,186 bytes allocated
==3236== 
==3236== All heap blocks were freed -- no leaks are possible
==3236== 
==3236== For counts of detected and suppressed errors, rerun with: -v
==3236== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
